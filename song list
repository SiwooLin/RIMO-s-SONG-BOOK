<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>RIMO's SONG BOOK 🎵</title>
<style>
  table, th, td {
    border: 1px solid gray;
    border-collapse: collapse;
  }
  th, td {
    padding: 8px;
    text-align: center;
    vertical-align: middle;
  }
  th {
    background-color: #f0f0f0;
  }
  .category-buttons, .sort-buttons {
    margin: 10px 0;
  }
  button {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
  }
  .divider {
    margin: 20px auto;
    width: 80%;
    height: 1px;
    background-color: #999;
    border: none;
  }
  .notice {
    width: 90%;
    max-width: 800px;
    margin: 10px auto 20px auto;
    text-align: left;
    font-size: 0.95rem;
    color: #444;
    white-space: pre-line;
  }
  .no-result {
    display: none;
    margin-top: 10px;
    text-align: center;
  }
  /* 음절행 스타일 */
  .syllable-row td {
    background-color: #fafafa;
    text-align: left;
    padding: 10px;
    font-weight: bold;
    border-top: 2px solid #ccc;
  }
  .syllable-cell {
    border: 1px solid #ddd;
    margin: 2px;
    padding: 4px 6px;
    display: inline-block;
    background-color: #fff;
    border-radius: 4px;
    min-width: 40px;
    text-align: center;
  }
</style>
</head>
<body>

<h1>RIMO's SONG BOOK</h1>

<div class="important-notice">
  <p><strong>📌 필독 공지:</strong> 아래 버튼을 눌러 원하는 곡을 정렬하거나 카테고리별로 볼 수 있어요!</p>
</div>

<!-- 상단 카테고리: 설명서 & 가격표 -->
<div class="category-buttons">
  <button onclick="filterCategory('노래책 설명서')">노래책 설명서</button>
  <button onclick="filterCategory('가격표')">가격표</button>
</div>

<hr class="divider" />

<!-- 장르 카테고리 -->
<div class="category-buttons">
  <button onclick="filterCategory('K-pop')">K-pop</button>
  <button onclick="filterCategory('K-pop 아이돌')">K-pop 아이돌</button>
  <button onclick="filterCategory('Pop')">Pop</button>
</div>

<!-- 정렬 버튼 -->
<div class="sort-buttons" id="sortButtons" style="display:none;">
  <button onclick="sortTable('singer')">가수순</button>
  <button onclick="sortTable('title')">제목순</button>
  <button onclick="sortTable('code')">코드순</button>
  <button onclick="sortTable('level')">난이도순</button>
  <button onclick="sortTable('skill')">숙련도순</button>
</div>

<!-- 공지 및 테이블 -->
<div class="notice" id="genreNotice" style="display:none;">
  • 숙지가 부족한 노래는 따로 표기되어 있습니다.<br>
  • 가수 이름은 가나다 순서로 나열되어 있습니다.
</div>

<table id="songTable" style="width:90%; max-width:800px; margin:auto;">
  <thead>
    <tr id="tableHeader">
      <th>가수</th>
      <th>제목</th>
      <th>코드</th>
      <th>난이도</th>
      <th>숙련도</th>
    </tr>
  </thead>
  <tbody id="tableBody">
    <!-- 내용은 스크립트에서 생성 -->
  </tbody>
</table>

<div class="no-result" id="noResult">검색 결과가 없어요 🥲</div>

<script>
  // 데이터 샘플 (가수명은 초성별로 잘 나눠짐)
  const data = {
    "노래책 설명서": [
      {text: `•노래 신청을 할 땐 꼭!! 가수와 곡 제목을 함께 적어서 신청해주세요. (코드도 적어주시면 감사합니다!)

•컨디션에 따라 부르기 어렵다고 판단 될 경우 신청공을 거절할 수도 있습니다. (거절된 신청은 기본 노래 2곡으로 대체 가능합니다.)

•설명을 읽지 않고 신청할 경우 책임은 신청자에게 있습니다.

•추천 곡은 디스코드 노래 추천방에 적어주세요.

❌과도한 평가와 훈수는 자제해주세요❌`}
    ],
    "가격표": [
      {text: `•기본 노래 신청은 2000 치즈 혹은 투네이션으로 신청 가능합니다.

•어려운 노래 신청은 5000 치즈 혹은 투네이션으로 신청 가능합니다.

•유료곡 노래 신청은 10000 치즈 이상 혹은 투네이션으로 신청 가능합니다.

•개인 소장 노래 녹은본 (믹싱 유무 선택 가능)은 200,000 치즈 혹은 투네이션으로 신청 가능합니다.`}
    ],
    "K-pop": [
      {title: "Ditto", singer: "강다니엘", code: "C", level: 2, skill: "⭐️⭐️"},
      {title: "OMG", singer: "김재환", code: "Am", level: 3, skill: "⭐️⭐️⭐️"},
      {title: "Butterfly", singer: "나연", code: "F", level: 1, skill: "⭐️"},
      {title: "Eyes, Nose, Lips", singer: "태양", code: "G", level: 4, skill: "⭐️⭐️⭐️⭐️"},
      {title: "Love Shot", singer: "민호", code: "Dm", level: 3, skill: "⭐️⭐️⭐️"},
      {title: "Solo", singer: "태연", code: "Gm", level: 2, skill: "⭐️⭐️"},
      {title: "봄날", singer: "방탄소년단", code: "Em", level: 3, skill: "⭐️⭐️⭐️"},
    ],
    "K-pop 아이돌": [
      {title: "Hype Boy", singer: "New Jeans", code: "F", level: 3, skill: "⭐️⭐️⭐️"},
      {title: "Next Level", singer: "aespa", code: "Gm", level: 4, skill: "⭐️⭐️⭐️⭐️"},
      {title: "Dalla Dalla", singer: "ITZY", code: "Am", level: 3, skill: "⭐️⭐️⭐️"},
      {title: "Gee", singer: "소녀시대", code: "C", level: 2, skill: "⭐️⭐️"},
      {title: "Cheer Up", singer: "트와이스", code: "G", level: 3, skill: "⭐️⭐️⭐️"},
    ],
    "Pop": [
      {title: "Shape of You", singer: "Ed Sheeran", code: "Dm", level: 3, skill: "⭐️⭐️⭐️"},
      {title: "Perfect", singer: "Ed Sheeran", code: "G", level: 2, skill: "⭐️⭐️"},
      {title: "Someone Like You", singer: "Adele", code: "C", level: 4, skill: "⭐️⭐️⭐️⭐️"},
      {title: "Hello", singer: "Adele", code: "F", level: 2, skill: "⭐️⭐️"},
      {title: "Bad Guy", singer: "Billie Eilish", code: "Am", level: 3, skill: "⭐️⭐️⭐️"},
    ]
  };

  const koreanSyllables = ["ㄱ","ㄴ","ㄷ","ㄹ","ㅁ","ㅂ","ㅅ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"];
  const englishLetters = [..."abcdefghijklmnopqrstuvwxyz"];

  let currentCategory = "";

  function createHeaderForText() {
    const header = document.getElementById('tableHeader');
    header.innerHTML = '';
    const th = document.createElement('th');
    th.innerText = '내용';
    th.colSpan = 5;
    header.appendChild(th);
  }

  function createHeaderForGenre() {
    const header = document.getElementById('tableHeader');
    header.innerHTML = '';
    ['가수','제목','코드','난이도','숙련도'].forEach(text => {
      const th = document.createElement('th');
      th.innerText = text;
      header.appendChild(th);
    });
  }

  // 초성 뽑는 함수 (한글 한 글자 기준)
  function getInitialConsonant(char) {
    const uni = char.charCodeAt(0);
    if(uni < 0xAC00 || uni > 0xD7A3) return ''; // 한글 아님
    const initialConsonants = ["ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"];
    return initialConsonants[Math.floor((uni - 0xAC00) / 588)] || '';
  }

  // 한글 음절별로 가수 분류
  function groupByKoreanInitial(dataList) {
    const groups = {};
    koreanSyllables.forEach(syl => groups[syl] = []);
    dataList.forEach(item => {
      const initial = getInitialConsonant(item.singer[0]);
      if(groups[initial]) groups[initial].push(item);
    });
    return groups;
  }

  // 영어 알파벳으로 가수 분류
  function groupByEnglishInitial(dataList) {
    const groups = {};
    englishLetters.forEach(l => groups[l] = []);
    dataList.forEach(item => {
      const first = item.singer[0].toLowerCase();
      if(groups[first]) groups[first].push(item);
    });
    return groups;
  }

  function filterCategory(category) {
    currentCategory = category;
    const tbody = document.getElementById('tableBody');
    const notice = document.getElementById('genreNotice');
    const noResult = document.getElementById('noResult');
    const sortButtons = document.getElementById('sortButtons');

    tbody.innerHTML = '';

    if(category === '노래책 설명서' || category === '가격표'){
      createHeaderForText();
      notice.style.display = 'none';
      sortButtons.style.display = 'none';
      data[category].forEach(item => {
        const tr = document.createElement('tr');
        const td = document.createElement('td');
        td.colSpan = 5;
        td.style.textAlign = 'left';
        td.style.padding = '12px';
        td.style.whiteSpace = 'pre-line';
        td.innerText = item.text;
        tr.appendChild(td);
        tbody.appendChild(tr);
      });
      noResult.style.display = 'none';
      return;
    }

    createHeaderForGenre();
    notice.style.display = 'block';
    sortButtons.style.display = 'flex';

    let items = data[category] || [];
    if(items.length === 0){
      noResult.style.display = 'block';
      return;
    }
    noResult.style.display = 'none';

    // 가나다순 정렬 (가수 기준)
    items.sort((a,b) => a.singer.localeCompare(b.singer));

    // 기본 노래 행 추가
    items.forEach(item => {
      const tr = document.createElement('tr');
      ['singer','title','code','level','skill'].forEach(key => {
        const td = document.createElement('td');
        td.innerText = item[key];
        tr.appendChild(td);
      });
      tbody.appendChild(tr);
    });

    // 여기서부터 초성(가로 음절) 행 추가 구현은 필요에 따라 추가하세요.
  }

  // 초기화 시 설명서 보여주기
  window.onload = () => {
    filterCategory('노래책 설명서');
  };
</script>

</body>
</html>
